!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Ajaxable",[],t):"object"==typeof exports?exports.Ajaxable=t():e.Ajaxable=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toCamelCase=t.resolveFunctionName=t.uuid=t.isElement=t.extend=void 0;t.extend=function(e,t){var n,o={};for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&(o[n]=e[n]);for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n]);return o};t.isElement=function(e){return!(!e||1!==e.nodeType)};t.uuid=function(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()};t.resolveFunctionName=function(e){var t;if("function"==typeof e)return e;if("string"==typeof e){if(e.indexOf(".")<=-1&&"function"==typeof window[e])return window[e];if("function"==typeof(t=e.split(".").reduce(function(e,t){return e[t]},window)))return t}return null};t.toCamelCase=function(e){return(e=e.replace("data-ajaxable-","").replace(/-/g," ")).replace(/(?:^\w|[A-Z]|\b\w)/g,function(e,t){return 0===t?e.toLowerCase():e.toUpperCase()}).replace(/\s+/g,"")}},function(e,t,n){"use strict";var o=Object.prototype.hasOwnProperty,r="~";function i(){}function a(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function s(e,t,n,o,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new a(n,o||e,i),u=r?r+t:t;return e._events[u]?e._events[u].fn?e._events[u]=[e._events[u],s]:e._events[u].push(s):(e._events[u]=s,e._eventsCount++),e}function u(e,t){0==--e._eventsCount?e._events=new i:delete e._events[t]}function l(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(r=!1)),l.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)o.call(e,t)&&n.push(r?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},l.prototype.listeners=function(e){var t=r?r+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,i=n.length,a=new Array(i);o<i;o++)a[o]=n[o].fn;return a},l.prototype.listenerCount=function(e){var t=r?r+e:e,n=this._events[t];return n?n.fn?1:n.length:0},l.prototype.emit=function(e,t,n,o,i,a){var s=r?r+e:e;if(!this._events[s])return!1;var u,l,c=this._events[s],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,n),!0;case 4:return c.fn.call(c.context,t,n,o),!0;case 5:return c.fn.call(c.context,t,n,o,i),!0;case 6:return c.fn.call(c.context,t,n,o,i,a),!0}for(l=1,u=new Array(f-1);l<f;l++)u[l-1]=arguments[l];c.fn.apply(c.context,u)}else{var h,p=c.length;for(l=0;l<p;l++)switch(c[l].once&&this.removeListener(e,c[l].fn,void 0,!0),f){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,t);break;case 3:c[l].fn.call(c[l].context,t,n);break;case 4:c[l].fn.call(c[l].context,t,n,o);break;default:if(!u)for(h=1,u=new Array(f-1);h<f;h++)u[h-1]=arguments[h];c[l].fn.apply(c[l].context,u)}}return!0},l.prototype.on=function(e,t,n){return s(this,e,t,n,!1)},l.prototype.once=function(e,t,n){return s(this,e,t,n,!0)},l.prototype.removeListener=function(e,t,n,o){var i=r?r+e:e;if(!this._events[i])return this;if(!t)return u(this,i),this;var a=this._events[i];if(a.fn)a.fn!==t||o&&!a.once||n&&a.context!==n||u(this,i);else{for(var s=0,l=[],c=a.length;s<c;s++)(a[s].fn!==t||o&&!a[s].once||n&&a[s].context!==n)&&l.push(a[s]);l.length?this._events[i]=1===l.length?l[0]:l:u(this,i)}return this},l.prototype.removeAllListeners=function(e){var t;return e?(t=r?r+e:e,this._events[t]&&u(this,t)):(this._events=new i,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=r,l.EventEmitter=l,e.exports=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(3))&&o.__esModule?o:{default:o},i=n(0);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var u=n(1);function l(e,t){var n,o,r=[];if(e||(e=[]),"string"==typeof e&&(e=document.querySelectorAll(e)),(0,i.isElement)(e)&&(e=[e]),t)for(n=0;n<e.length;n+=1)o=e[n],(0,i.isElement)(o)&&!o.getAttribute("data-ajaxable-id")&&r.push(o);else r=Array.prototype.slice.apply(e);return r}var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.emitter=new u,this.options="object"===a(n)?(0,i.extend)({},n):{},this.origElements=t,this.elements=[],this.addElements(this.origElements)}var t,n,o;return t=e,(n=[{key:"addElements",value:function(e){var t=l(e,!0);if(0===t.length)return!1;t.forEach(function(e){e=function(e){var t=(0,i.uuid)();return!e.getAttribute("data-ajaxable-id")&&(e.setAttribute("data-ajaxable-id",t),e=new r.default(e,this.options))}.call(this,e),this.elements.push(e)},this)}},{key:"removeElements",value:function(e){var t,n,o=l(e);if(o.length>0)for(t in o)if(o[t].getAttribute("data-ajaxable-id"))for(n in this.elements)this.elements[n].getDomElement()===o[t]&&(this.elements[n].getDomElement().removeAttribute("data-ajaxable-id"),this.elements[n].destroy(),this.elements.splice(n,1))}}])&&s(t.prototype,n),o&&s(t,o),e}();t.default=c,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=s(n(4)),r=s(n(5)),i=s(n(6)),a=n(0);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var c=n(1);function f(){this.on("ajaxable:on-ajax-before",this.responseHandler.beforeSend,this),this.on("ajaxable:on-ajax-success",this.responseHandler.onSuccess,this),this.on("ajaxable:on-ajax-error",this.responseHandler.onError,this),this.on("ajaxable:on-ajax-complete",this.responseHandler.onComplete,this),this.on("ajaxable:on-ajax-abort",this.responseHandler.onAbort,this),this.on("ajaxable:on-ajax-timeout",this.responseHandler.onTimeout,this)}var h=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.element=t,this.options="object"===u(n)?(0,a.extend)(i.default,n):i.default,this.emitter=new c,this.ajax=new o.default(this.options),this.responseHandler=new r.default(this),function(){var e=this;this.ajax.on("onSuccess",function(t,n){return e.emit("ajaxable:on-ajax-success",t,n)},this),this.ajax.on("onError",function(t,n){return e.emit("ajaxable:on-ajax-error",t,n)},this),this.ajax.on("onComplete",function(t,n){return e.emit("ajaxable:on-ajax-complete",t,n)},this),this.ajax.on("onAbort",function(t,n){return e.emit("ajaxable:on-ajax-abort",t,n)},this),this.ajax.on("onTimeout",function(t,n){return e.emit("ajaxable:on-ajax-timeout",t,n)},this)}.call(this),f.call(this),function(){var e=this,t=this,n=this.element;switch("FORM"===n.nodeName&&(t.submitAjaxHandler=function(e){e.preventDefault(),t.startAjaxRequest()},n.addEventListener("submit",t.submitAjaxHandler,!1)),n.getAttribute("data-ajaxable-trigger-type")){case"timeout":t.requestTimerId=setTimeout(function(){return e.startAjaxRequest()},t.options.requestTimeout);break;case"interval":t.requestIntervalId=setInterval(function(){return e.startAjaxRequest()},t.options.requestInterval);break;case"click":t.clickAjaxHandler=function(e){e.preventDefault(),t.startAjaxRequest()},n.addEventListener("click",t.clickAjaxHandler,!1);break;case"hover":t.hoverAjaxHandler=function(e){e.preventDefault(),t.startAjaxRequest()},n.addEventListener("hover",t.hoverAjaxHandler,!1)}}.call(this),function(){var e,t,n=this.element.attributes,o=n.length;for(t=0;t<o;t+=1)e=n[t],void 0!==this.options[(0,a.toCamelCase)(e.nodeName)]&&(this.options[(0,a.toCamelCase)(e.nodeName)]=e.nodeValue);this.element.getAttribute("href")?this.options.ajaxUrl=this.element.getAttribute("href"):this.element.getAttribute("action")&&(this.options.ajaxUrl=this.element.getAttribute("action"))}.call(this)}var t,n,s;return t=e,(n=[{key:"startAjaxRequest",value:function(){var e=function(){this.emit("ajaxable:on-ajax-before",this.options.ajaxData)}.call(this);this.ajax.doRequest(e)}},{key:"destroy",value:function(){(function(){var e=this.element;switch("FORM"===e.nodeName&&e.removeEventListener("submit",this.submitAjaxHandler),e.getAttribute("data-ajaxable-trigger-type")){case"timeout":clearTimeout(this.requestTimerId);break;case"interval":clearTimeout(this.requestIntervalId);break;case"click":e.removeEventListener("click",this.clickAjaxHandler);break;case"hover":e.removeEventListener("click",this.hoverAjaxHandler)}}).call(this,this.element)}},{key:"getDomElement",value:function(){return this.element}},{key:"setOptions",value:function(e){var t,n,o=this.element.attributes,r=o.length,i=[];if("object"===u(e)){for(t=0;t<r;t+=1)i.push((0,a.toCamelCase)(o[t].nodeName));for(n in e)e.hasOwnProperty(n)&&i.indexOf(n)>0&&delete e[n]}return this.options="object"===u(e)?(0,a.extend)(this.options,e):this.options,f.call(this),this.ajax.setOptions(this.options),this}},{key:"on",value:function(e,t,n){this.emitter.on(e,t,n||void 0)}},{key:"emit",value:function(e,t,n,o,r,i){return this.emitter.emit(e,t,n,o,r,i)}}])&&l(t.prototype,n),s&&l(t,s),e}();t.default=h,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(0);function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=n(1);function s(){var e;4===this.xhr.readyState&&(e=function(){var e;try{e=JSON.parse(this.xhr.responseText)}catch(t){e=this.xhr.responseText}return e}.call(this),this.xhr.status>=200&&this.xhr.status<300?this.emit("onSuccess",this.xhr,e):this.emit("onError",this.xhr,e),this.emit("onComplete",this.xhr,e))}function u(){(function(){this.xhr.onabort=function(){this.emit("onAbort",this.xhr)}.bind(this)}).call(this),function(){this.options.ajaxTimeout&&(this.xhr.timeout=this.options.ajaxTimeout),this.xhr.onabort=function(){this.emit("onTimeout",this.xhr)}.bind(this)}.call(this),function(){this.xhr.onreadystatechange=s.bind(this)}.call(this)}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t,this.xhr=null,this.emitter=new a,function(){void 0===window.XMLHttpRequest?window.XMLHttpRequest=function(){try{this.xhr=new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(e){try{this.xhr=new ActiveXObject("Mxsml2.XMLHTTP.3.0")}catch(e){this.xhr=new Error("Ajax not supported in your browser")}}}:this.xhr=new XMLHttpRequest}.call(this),u.call(this)}var t,n,s;return t=e,(n=[{key:"doRequest",value:function(e){if(!1===this.options.ajaxUrl||"string"!=typeof this.options.ajaxUrl)throw new Error("Invalid Ajax URL");this.xhr.open(this.options.ajaxMethod,this.options.ajaxUrl,this.options.ajaxAsync,this.options.ajaxUserName,this.options.ajaxPassword),function(){this.options.ajaxContentType&&this.xhr.setRequestHeader("Content-Type",this.options.ajaxContentType)}.call(this),function(){var e,t,n;if("object"===i(this.options.ajaxRequestHeaders))for(e in this.options.ajaxRequestHeaders)this.options.ajaxRequestHeaders.hasOwnProperty(e)&&(t=e,n="string"==typeof this.options.ajaxRequestHeaders[e]?this.options.ajaxRequestHeaders[e]:"",this.xhr.setRequestHeader(t,n))}.call(this),this.xhr.send(e)}},{key:"setOptions",value:function(e){return this.options=(0,o.extend)(this.options,e),u.call(this),this}},{key:"on",value:function(e,t,n){this.emitter.on(e,t,n||void 0)}},{key:"emit",value:function(e,t,n,o,r,i){this.emitter.emit(e,t,n,o,r,i)}}])&&r(t.prototype,n),s&&r(t,s),e}();t.default=l,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(0);function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.element=t}var t,n,i;return t=e,(n=[{key:"beforeSend",value:function(e){var t=this.element.options,n=(0,o.resolveFunctionName)(t.ajaxBeforeSend);return"function"==typeof n?n.call(this.element,e):e}},{key:"onSuccess",value:function(e,t){var n=this.element.options,r=(0,o.resolveFunctionName)(n.ajaxOnSuccess);"function"==typeof r&&r.call(this.element,e,t)}},{key:"onError",value:function(e,t){console.log(e);var n=this.element.options,r=(0,o.resolveFunctionName)(n.ajaxOnError);"function"==typeof r&&r.call(this.element,e,t)}},{key:"onComplete",value:function(e,t){var n=this.element.options,r=(0,o.resolveFunctionName)(n.ajaxOnComplete);"function"==typeof r&&r.call(this.element,e,t)}},{key:"onAbort",value:function(e,t){var n=this.element.options,r=(0,o.resolveFunctionName)(n.ajaxOnAbort);"function"==typeof r&&r.call(this.element,e,t)}},{key:"onTimeout",value:function(e,t){var n=this.element.options,r=(0,o.resolveFunctionName)(n.ajaxOnTimeout);"function"==typeof r&&r.call(this.element,e,t)}}])&&r(t.prototype,n),i&&r(t,i),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o={triggerType:"click",requestTimeout:1e3,requestInterval:1e3,ajaxUrl:!1,ajaxMethod:"POST",ajaxAsync:!0,ajaxUserName:null,ajaxPassword:null,ajaxContentType:"application/x-www-form-urlencoded",ajaxTimeout:3e4,ajaxRequestHeaders:{"x-request-with":"smartajax"},ajaxData:{},ajaxBeforeSend:null,ajaxOnSuccess:null,ajaxOnError:null,ajaxOnComplete:null,ajaxOnAbort:null,ajaxOnTimeout:null,ajaxShowLoader:!1,ajaxLoaderContainer:document.body,ajaxDoConfirm:!1,domReplaceTo:!1,domReplaceClosestTo:!1,domReplaceInnerTo:!1,domReplaceClosestInnerTo:!1,domAppendTo:!1,domPrepandTo:!1,domClearTo:!1,domClearClosestTo:!1,domRemoveTo:!1,domRemoveClosestTo:!1,notificationType:"alert",alertOptions:{},toastrOptions:{},swalOptions:{}};t.default=o,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,